template<class T> struct Dijkstra{
    using P = pair<T, int>;
    Dijkstra(int v, T inf) : size(v),inf(inf),graph(v,vector<Edge>()),dist(v){}
    void addEdge(int from, int to, T cost){
        graph[from].push_back({to, cost});
    }
    void calc(int start){
        priority_queue<P, vector<P>, greater<P>> que;
        fill(dist.begin(), dist.end(), inf);
        dist[start] = 0;
        que.push({0, start});
        while(que.size()){
            P p = que.top(); que.pop();
            int v = p.second;
            if(dist[v] < p.first) continue;
            for(auto& e : graph[v]) if(chmin(dist[e.to], dist[v]+e.cost)){
                que.push({dist[e.to], e.to});
            }
        }
    }
    T getDist(int v){ return dist[v]; }
    private:
        struct Edge{ int to; T cost; };
        int size;
        T inf;
        vector<vector<Edge>> graph;
        vector<T> dist;
};
