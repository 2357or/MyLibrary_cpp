const int MOD = 1000000007;
#include <cassert>
struct mod_int {
    using mint = mod_int;
    ll val;
    constexpr mod_int(ll x=0):val((x%MOD+MOD)%MOD){}
    constexpr mint& operator+=(const mint r){if((val+=r.val)>=MOD)val-=MOD; return *this;}
    constexpr mint& operator-=(const mint r){if((val-=r.val)<0)val+=MOD; return *this;}
    constexpr mint& operator*=(const mint r){(val*=r.val)%=MOD; return *this;}
    constexpr mint& operator/=(const mint r){return *this *= r.inv();}
    mint inv()const{return pow(MOD-2);}
    mint pow(ll n) const{ assert(0 <= n);
        if(!n)return 1;
        mint t = pow(n>>1);
        t *= t; if(n&1)t*=(*this);
        return t;
    }
    friend mint operator+(const mint& lhs,const mint& rhs){return mint(lhs)+=rhs;}
    friend mint operator-(const mint& lhs,const mint& rhs){return mint(lhs)-=rhs;}
    friend mint operator*(const mint& lhs,const mint& rhs){return mint(lhs)*=rhs;}
    friend mint operator/(const mint& lhs,const mint& rhs){return mint(lhs)/=rhs;}
    friend bool operator==(const mint& lhs,const mint& rhs){return lhs.val==rhs.val;}
    friend bool operator!=(const mint& lhs,const mint& rhs){return lhs.val!=rhs.val;}
    friend constexpr ostream& operator<<(ostream& os,const mint& x)noexcept{
        return os<<x.val;
    }
    friend constexpr istream& operator>>(istream& is,mint& x)noexcept{
        return is>>x.val;
    }
};
using mint = mod_int;
